# -*- coding: utf-8 -*-
"""hoya_hacks_night_sky.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/AndrewCart5/eb39c6160e7cf050a0fbd36b719e45e4/hoya_hacks_night_sky.ipynb

# Hoya Hacks Night Sky Investigation
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install skyfield
# !pip install starplot
# # !pip install typing_extensions
# !pip install googlemaps
# # !pip install typing-extensions --upgrade
# !pip install pgeocode
# !pip install bokeh
# !pip install timezonefinder
# !pip install wikipedia

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import time

import datetime
import skyfield
import googlemaps
import pgeocode
import wikipedia
from bokeh.io import show
from bokeh.plotting import gmap
from bokeh.models import GMapOptions
from bokeh.io import output_notebook
from datetime import datetime
from pytz import timezone
from starplot import ZenithPlot
from starplot.styles import PlotStyle, extensions
from timezonefinder import TimezoneFinder
api_key = 'AIzaSyDSQs3waGPDvKW3P1mhKyABAM-R_FvHz9w'

# Commented out IPython magic to ensure Python compatibility.
# Mounts google drive to change directory for outputs
# %%capture
from google.colab import drive
drive.mount('/content/drive')
# %cd /content/drive/My Drive/hoya_hacks_2024/

def get_coordinates(api_key, address):
    gmaps = googlemaps.Client(key=api_key)

    try:
        # Geocode the address
        geocode_result = gmaps.geocode(address)
        # Extract latitude and longitude
        if geocode_result:
            location = geocode_result[0]['geometry']['location']
            latitude = location['lat']
            longitude = location['lng']
            return latitude, longitude
        else:
            return None

    except Exception as e:
        print(f"Error: {e}")
        return None

def make_coordinates():

  coordinates = get_coordinates(api_key, city_state)

  if coordinates:
      print(f"Coordinates for {city_state}: Latitude {coordinates[0]}, Longitude {coordinates[1]}")
      return coordinates
  else:
      print(f"Unable to retrieve coordinates for {city_state}")
      return None, None

def plot_map(lat, lng, zoom=10, map_type='satellite'):
    gmap_options = GMapOptions(lat=lat, lng=lng,
                               map_type='hybrid', zoom=zoom)
    p = gmap(api_key, gmap_options, title=city_state,
             width=1000, height=800)
    center = p.circle([lng], [lat], size=10, alpha=0.5, color='red')
    show(p)
    return p
output_notebook()

def printGraph(lat, lng):
  tz_finder = TimezoneFinder()
  dt = datetime(date_datetime.year, date_datetime.month, date_datetime.day,
                22, 0, tzinfo=timezone(tz_finder.timezone_at(lng=lng, lat=lat)))
  try:
    print(f"Coordinates for {city_state}: Latitude {lat}, Longitude {lng}")
  except Exception as e:
    print("Invalid coordinates")
  p = ZenithPlot(
      lat=lat,
      lon=lng,
      dt=dt,
      padding = 0,
      limiting_magnitude=4.6,

      style = PlotStyle().extend (
          extensions.GRAYSCALE_DARK,
          extensions.ZENITH,
    ),

      resolution=1500,
      adjust_text=True,
  )
# output_notebook()
  # p.export("01_star_chart.png")
  # export_file_name = f"star_chart_{city_without_space}_{state}_{date_datetime.year}_{date_datetime.month}.png"
  # p.export(export_file_name)

def run_first_tranche():
  temp = make_coordinates()
  lat, lng = temp[0], temp[1]
  plot_map(lat, lng)
  printGraph(lat, lng)

def investigate_stars():
  print("The first map shows where you are and the second map shows the stars above you.")
  print("Now you can investigate the stars by entering their names and reading their wikipedia pages.")
  while True:
    x = input("Enter star name: ")
    planets = {"mercury", "venus", "earth", "mars", "jupiter", "saturn", "neptune", "uranus"}
    try:
      if x.strip().lower() in planets:
        print(wikipedia.page(f"{x} planet").url)
      else:
        print(wikipedia.page(f"{x} star night sky").url)
    except wikipedia.exceptions.PageError:
      print("This star didn't work.")
      x = input("Would you like to try another star? Y/N")
      if x.strip().lower() == "n":
        break
    x = input("Would you like to learn about another star? Y/N ")
    if x.strip().lower() == "n" :
      break

date = input("Please enter the date, YYYY-MM-DD: ")
# date = '2010-01-02' # @param {type:"date"}
date_datetime = datetime.strptime(date, "%Y-%m-%d")
print()
zip_code_str = input("Please enter your 5 digit zip code: ")
print()
# zip_code = 30004 # @param {type: "number"}
# zip_code_str = str(zip_code)
country = pgeocode.Nominatim('us')
a = country.query_postal_code(zip_code_str)
city, state = a[2], a[4]
city_without_space = '_'.join(city.split())
city_state = city + ", " + state
run_first_tranche()

investigate_stars()

